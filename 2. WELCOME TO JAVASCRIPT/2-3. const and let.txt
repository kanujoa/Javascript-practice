자바스크립트에서 변수를 만드는 방법은 const를 사용하는 것 이외에도 let을 쓰는 방법이 있다.

1. const a = 5;에서 const를 let으로 바꾸어 보자. 이렇게 바꾸어도 console 창에서의 결과는 바뀐 것이 없다.
그러므로 const를 모두 let으로 바꾸어 보자.

2. const와 let의 차이점
- const: 상수 --> 값이 바뀔 수 없다.
- let: 생성할 때 사용, 변수를 나중에 업데이트 하고 싶은 경우 사용할 수 있다.
ex) const a = 5;
     const b = 2;
     let myName = "nico";
위쪽 2개는 계속 5와 2의 값을 가져가는 것이다. 그리고 맨 아래의 경우는 다음과 같이 코드를 써서 값을 업
데이트 할 수 있다. 변수가 업데이트되는 것은 나중에 써진 값이 변수에 대입되는 것이다. 
let myName = "nicolas";

console.log(a + b);
console.log(a * b);
console.log(a / b);
console.log("hello " + myName);

myName = "nicolas";

console.log("your new name is " + myName);

console 창에 hello nico와 your new name is nicolas가 모두 출력되는 것을  볼 수 있다. --> 업뎃 성공
but const로 위와 같이 변수를 업뎃하려고 하면 오류가 발생한다.

즉, 나는 위 코드를 통해 절대 바뀌지 않을 두 변수인 a, b를 선언해 준 것이고 바뀔 수도 있는 변수인 myName
도 선언해 주었다.

기본적으로는(대부분) const를 쓴다. 변수를 업데이트해야 하는 경우보다 그대로 가져가는 경우가 많기 때문이다.
프로그램에서 몇몇 중요한 부분만 업데이트 시킬 것이므로 그때 let를 사용하면 된다.

* 업데이트: 이전 버전은 아예 사용하지 않고 새로운 버전만 사용한다는 것
따라서 자바스크립트는 시간을 거쳐 패치되어왔다고 표현하는 것이 옳음. 자바스크립트의 초창기 기능을
지금도 사용하는 것이 가능하기 때문
이전의 자바스크립트에서는 변수를 생성할 때 var을 사용함.
var은 원하면 어디서든 변수를 업뎃시킬 수 있음. 즉, 규칙이 모호함.
앞에서 작성한 코드에서 const와 let 부분을 모두 var로 바꾸어도 console창에 제대로 출력되는 것을 볼 수 있음.
but 단점은 언어를 통한 보호를 받지 못한다는 것이다. 내가 실수로 변수값을 업뎃해도 언어가 틀렸다고 말해주지 않는다.

따라서 const와 let을 사용하여 코드가 밑에서 무엇을 할지를 명시해주는 것이 좋음.

- 정리: 기본적으로 const를 쓰고 필요할 때만 let을 쓰되 var은 쓰지 말 것.
         --> always: const, sometimes: let, never: var