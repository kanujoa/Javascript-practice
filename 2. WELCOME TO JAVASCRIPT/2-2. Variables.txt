app.js로 넘어간다.

1. console에게 메시지를 보내는 코드인 console.log 작성하기(console에 log하고 print 할 수 있게 함)
console.log(54545454); 를 작성하면 index.html의 개발자 도구 창을 열어 console 창을 살펴보면 54545454
그대로 적혀 있는 것을 볼 수 있음.
console.log("lalalalal"); 처럼 string을 넣는 것도 가능함. (다만, 따옴표 꼭 작성하기)

2. variables(변수)
2-1. 다음과 같이 3가지 연산을 console.log 해 보자.
console.log(5 + 2);
console.log(5 * 2);
console.log(5 / 2);
index.html에서 새로고침해서 console창을 살펴보면 3개의 값이 print되어 있는 것을 확인할 수 있다.
출력된 결과의 순서를 보아 자바스크립트는 파일을 위에서 아래로 읽고 있다는 것을 알 수 있다.

* 코드를 적게 쓰는 것이 시간과 에러 발생 횟수 단축에 좋다. 따라서 위의 코드를 줄여보겠다. variable을 통해

2-2. variable: 자바스크립트 뿐만 아니라 다른 프로그램 언어에서도 '값을 저장하거나 유지하는 역할'을 한다.
코드를 수정할 때 변수를 사용하지 않으면 문자열이나 숫자 등을 일일이 하나씩 수정해야 하는데 변수를 사용
하면 변수 개수만큼만 수정해 주면 된다.(단축키 쓰면 되므로) 

- 자바스크립트로 variable 만드는 방법
'const' 사용 (constant, 상수, 바뀌지 않고 계속 유지되는 값을 의미)
const a = 5; 작성   --> constant인 variable a를 생성함. a가 variable 이름이고 a가 5라는 값을 가지고 있을 거란
의미를 가짐. 따라서 위의 코드에서 5 부분을 모두 a로 바꾸어도 무방해짐.
브라우저에서 새로고침 해도 앞에서와 똑같은 순서로 똑같은 결과가 나옴. --> 성공
a는 변수이므로 a 안에 들어갈 값도 수정이 가능하다. 5 대신 다른 값들을 적어주면 되고, 결과는 아까와는 
다른 값이 나오게 될 것이다.

const b = 2; 작성 --> 이번에는 variable b를 생성하였는데 이는 string이 아닌 number이다.(따옴표X 이므로)
아래 3개의 코드 마지막 부분도 모두 b로 바꾸어 보자. console창에서의 결과는 그대로이다. --> 성공

- variable 이름 정하기
variable의 이름에는 공백이 있을 수 없다.(이름에 space 사용 불가)
일반적으로 띄어쓰기를 해야 하는 부분의 다음 단어의 첫글자는 대문자로 작성(자바스크립트에서의 관행인 camelCase임.)
ex) const myName = "nico"; 
긴 변수 이름을 적어야 할 때는 다음과 같이 적음.
ex) const veryLongVariableName = 0;

* python에서는 snake_case로 변수 이름 지정     ex) my_name = "nico"

const myName = "nico";를 활용하기 위해 맨 아랫줄에 console.log("hello " + myName) 작성
결과로 hello nico가 나오면 성공