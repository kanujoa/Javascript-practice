화면을 새로고침하면 toDos가 localStorage에는 남아 있지만 화면에는 나타나지 않는 것을 볼 수 있다.
이것을 이번 시간에 고쳐볼 것이다.

1. 우리는 JSON.stringify()를 이용해 어떤 타입의 객체를 입력하든 string으로 바꾸어 주는 작업을 할 수 있
었다.
이번에는 'JSON.parse()'를 이용하여 JS가 이해할 수 있는 array 객체로 만들어줄 수 있다.

todo 입력창에 a, b, c, d를 입력해 보자. 그러면 localStorage에 JSON.stringify()에 의해 ["a","b","c","d"] 이렇게
단순한 string type의 array 형태가 있는 것을 볼 수 있다. 이제 console창에서 JSON.parse(localStorage.getItem("todos"))
라고 입력하면 ['a', 'b', 'c', 'd']로 결과가 뜨는데 이 함수를 통해 단순한 string이였던 ["a","b","c","d"]를 JS가
이해하고 실제로 무언가를 할 수 있는 array로 만들어 주었다.


2. todo를 입력하고, todo를 화면에 띄우고, todo를 화면에서 삭제하고, todo를 localStorage에 저장하는 기능을
지금까지 만들어 보았다. 이제 localStorage에서 todo를 가져와서 단순한 string 형태의 정보를 살아있는 
array 형태로 변환하는 작업을 해 볼 것이다.

const TODOS_KEY = "todos";     --> localStorage의 key에 해당하는 todos 작성 시 오타 발생 막기 위해 변수 선언해줌.

const savedToDos = localStorage.getItem(TODOS_KEY);     --> 맨 아래에 작성해 줌.

function saveToDos(){
    localStorage.setItem(TODOS_KEY, JSON.stringify(toDos));     --> 변수 선언해 주었으므로 "todos" 대신
}                                                                                       TODOS_KEY 작성

localStorage를 지우고 나서 console.log(savedToDos)를 하게 되면 null로 뜨게 된다.
이것을 해결하기 위해 만약 savedToDos가 localStorage에 존재한다면 그곳에서 value로 있는 string을 가지고
와서 JS가 활용할 수 있는 값(array)으로 바꾸는 코드를 만들어 볼 것이다.

console.log(savedToDos);     --> (1)     
if (savedToDos !== null){     --> 주목!!
    const parsedToDos = JSON.parse(savedToDos);     --> 주목!!
    console.log(parsedToDos);     --> (2)
}
a, ,b c를 입력창에 입력하면 console.log 결과로 
["a","b","c"]     --> (1)의 결과 : 단순 string 형태로 나온 것을 볼 수 있다. (그냥 localStorage에 저장되어 있는 것을 가져온 것이므로)
(3) ['a', 'b', 'c']     --> (2)의 결과 : array(object) 형태로 나왔다. JS에서 활용이 가능한 자료이다. (JSON.parse()를 거쳐서 나온 것이므로)
이렇게 뜨는 것을 볼 수 있다.


3. 대부분의 경우, JS로 array의 각 element들을 이용해 그것들에게 함수를 실행시켜 무언가를 하는 작업을 하고 
싶을 것이다. 다음과 같이 함수를 작성하여 실행할 수 있다.
function sayHello() {
    console.log("hello");     --> parsedToDos.forEach() 함수 실행 결과를 보기 위한 예시 함수
}

if (savedToDos !== null){
    const parsedToDos = JSON.parse(savedToDos);
    parsedToDos.forEach(sayHello);      --> 주목!! parsedToDos가 가지고 있는 각각의 item에 대해 sayHello
                                                                function을 실행해 달라고 요청하는 코드이다.
}
* forEach() 함수는 단순히 array에 들어있는 모든 값을 iterate하는(순찰, 도는) function이다. 값들을 가지고 무언가를
  하고 싶다면 forEach 함수의 인자에 코드를 더 적어 주어야 한다. (or 함수를 따로 만들어 함수 이름을 적어주기)
  즉, 반복문으로 길게 짜여진 코드를 함수로 만들어 놓은 것

새로고침을 하면 이미 localStorage에 ["a","b","c"](savedToDos라는 변수에 할당됨.)가 저장되어 있고 이것이
JSON.parse(savedToDos)에 의해 JS에서 활용 가능한 ['a', 'b', 'c'](array)로 변환되고 .forEach(sayHello)를 적용
시켜주면 item의 개수인 3개 만큼 console.log("hello")가 실행된다. 따라서 hello가 console창에 3번 뜨는 것
을 확인 가능하다.
["a","b","c","d","e","f"] 이런 식으로 localStorage에서 todos의 값을 추가하고 새로고침하면 바뀐 요소의 총
개수만큼의 hello가 출력된다. 위의 경우 hello가 6번 출력되는 것으로 결과가 바뀔 것이다.

- forEach 함수는 위 array의 item들에 대해 한 개의 function만 실행할 수 있게 해준다.
- 중요한 것은 현재 처리되고 있는 item이 어떤 것인지를 아는 것이다.
function sayHello(item) {
    console.log("this is the turn of", item);
}
위와 같이 실행해 보면 
this is the turn of a
this is the turn of b
this is the turn of c
this is the turn of d
this is the turn of e
this is the turn of f     이렇게 todo 입력창에 입력한 순서대로 뜨는 것을 볼 수 있다.
forEach 함수에 의해 parsedToDos에 해당하는 활용할 수 있는 array 형태의 localStorage에 저장된 입력값
의 item들(a, b, c, d, e, f)이 sayHello("a") 이런 식으로 sayHello 함수의 인자로 들어가서 실행문인 console.log
에 의해 console창에 띄워지는 것을 볼 수 있는 것이다.


4. 위처럼 sayHello와 같은 함수를 만들어도 되지만 다음과 같이 한번에 적어주는 방법을 사용해도 된다.
if (savedToDos !== null){
    const parsedToDos = JSON.parse(savedToDos);
    parsedToDos.forEach((item) => console.log("this is the turn of", item));     --> 주목!! (arrow function이라고 한다.)
}
이름도 필요 없고 새로운 함수도 필요 없기 때문에 코드 작성 시 시간을 단축할 수 있다.
이것은 위의 방법과 동일하게 parsedToDos에 있는 각각의 item에 대해서 console.log를 할 것이라는 의미이다.
