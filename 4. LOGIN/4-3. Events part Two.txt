form은 잠시 쉬어가고 링크에 대해 살펴보자.

1. 
<body>
    <form id="login-form">
        ..................
    </form>
    <a href = "https://nomadcoders.co">Go to courses</a>     --> 링크에 관한 html 추가!
    <script src="app.js"></script>
</body>

결과로 input란 아래에 링크가 부여된 text가 추가되고 그것을 누르면 nomadcoders 사이트로 이동한다.


2. 링크의 기본 동작은 클릭 시 다른 페이지로 이동하는 것이다. (form의 기본 동작이 submit이듯이!)
우리는 이것을 막아볼 것이다.
우선은 다음과 같이 코드를 작성해 보자.

const link = document.querySelector("a")     --> 옆과 같은 link 변수를 추가 (a tag 하나뿐이므로 그냥 옆처럼 적어주어도 됨.)

function handleLinkClick() {
    alert("clicked!");     --> "clicked!" 문구가 있는 경고창을 띄운다. 
}

link.addEventListener("click", handleLinkClick);     --> 링크를 건 부분에 click event가 발생할 시 handleLinkClick 함수 실행

결과적으로는 링크를 건 text를 클릭하면 "clicked"문구의 경고창이 뜨고 확인 버튼을 누르면 기본 동작인 
다른 페이지로 이동하는 동작이 실행된다.
(alert는 모든 동작을 차단시키는데 OK 버튼을 누르면 다시 기본 동작이 실행됨.)


3. 가끔은 무엇이 클릭됐는지 어디가 클릭됐는지 등의 정보를 알고 싶을 때가 있는데 이럴 때 JS는 단순히 함수를 실행시키기만
하는 것이 아니라 동시에 그 함수에 첫번째 인자(argument)로 object를 넣어줄 것임.
--> handleLinkClick({information about the event that just happened})
그 object에는 방금 일어난 event에 대한 여러 정보가 담겨 있고, handleLinkClick을 위한 EventListener 함수의
첫번째 인자로 주어지게 될 것임.
우리가 해야 할 것은 argument 자리를 제공해 주는 것 뿐이다.

function handleLinkClick(event) {     --> event라는 인자를 제공해 주었다.
    console.log(event)
    alert("clicked!");
}

위 코드 상태에서 refresh해보자. Go to courses를 클릭하면 alert 창이 뜨면서 console창에 PointerEvent(MouseEvent)
에 관한 내용이 뜬다. (앞선 시간에는 SubmitEvent에 관한 내용이 떴었다.)


4. 이제 다른 페이지로 이동하지 않게 해 주기 위해서 event.preventDefault()를 사용해 준다.
function handleLinkClick(event) {
    event.preventDefault();     --> 기본 동작을 막아줌.
    console.dir(event);     --> event의 내부를 보여줌.(dir)
}

이제 클릭해도 더 이상 nomadcoders로 이동하지 않는다. console창에는 발생한 event인 PointerEvent가 
뜨고 그에 관한 상세한 내용도 같이 뜬다.
그 중 defaultPrevented : true 는 브라우저가 하려고 하는 동작을 허용하지 않았다는 것을 의미함.

중요한 것! --> addEventListener 안에 있는 함수는 내가 직접 실행하는 것이 아니라 브라우저가 대신 해주는 것!


<정리>
addEventListener 안에 있는 함수는 직접 실행하지 않는다. 브라우저가 대신 실행시켜 주고 브라우저에서 해당
이벤트에 대한 정보 즉, object를 가지게 된다. addEventListener의 함수에서 object에 대한 자리만 할당해주면
해당 이벤트가 발생시킨 정보들에 대한 object들을 볼 수 있다.