user에게 항상 이름을 질문하는것은 번거롭기 때문에 value를 저장하는 방법을 배울 것이다.

1. username을 기억하는 것은 classname을 추가하고 삭제하는 것처럼 자주 하는 작업이다. 따라서 그에 대한
API가 존재할 것이다. 즉, 우리가 브라우저에 공짜로 뭔가를 기억할 수 있게 해주는 기능이 존재한다.
그 API의 이름을 local storage라고 한다.
console에 localStorage라고 입력하면 이미 정의되어 있는 것을 볼 수 있다. (Storage라는 것을 반환함.)
local storage는 우리가 브라우저에 뭔가를 저장할 수 있게 해줌으로써 나중에 가져다 쓸 수 있음.

개발자 도구에서 '>>' 버튼을 클릭하고 application을 클릭하면 Storage 카테고리에 Local Storage가 있는 것을
확인 가능함. 지금은 비어있지만 이것저것 저장하기 시작하면 바뀌는 것을 볼 수 있다.


2. setItem을 이용하면 localStorage에 item을 저장할 수 있다.
* 'somthing.something' 의 형태는 앞으로도 매우 자주 사용될 것!

console창에 localStorage.setItem("username", "nico") 작성 후 enter 누르기 (데이터 저장하기)
--> 위의 코드를 실행하면 우리의 DB에는 새로운 항목이 있는 것을 확인 가능하다.
--> Local Storage를 확인해 보면 Key가 username으로 되어 있고 Value가 nico로 되어 있는 것을 볼 수 있다.

console창에 localStorage.getItem("username") 작성 후 enter 누르기 (데이터 불러오기)
--> 결과로 nico가 뜸.

console창에 localStorage.removeItem("username") 작성 후 enter 누르기 (데이터 삭제하기)
--> Local Storage를 확인해 보면 Key와 Value가 삭제된 것을 볼 수 있음.


3. 우리가 할 것은 user가 이름을 제출할 때 그것을 저장해 주는 것!
우선 저장될 값의 이름(key)을 정해 주고, 그 다음에는 그에 해당하는 값인 username을 적어주면 된다.
function onLoginSubmit(event) {
    event.preventDefault();     // 브라우저의 기본 동작을 막아줌(submit시 페이지가 새로고침되지 않음.)
    loginForm.classList.add(HIDDEN_CLASSNAME);
    const username = loginInput.value;     --> 입력한 값을 변수 username에 대입되도록 설정해 줌.
    localStorage.setItem("username", username);     --> 주목! 
    greeting.innerText = `Hello ${username}`;
    greeting.classList.remove(HIDDEN_CLASSNAME);
}

결과 : 이름을 작성해 submit하면 Local Stroage에 Key는 username, Value는 nico로 뜨는 것을 볼 수 있다!