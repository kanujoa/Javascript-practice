우리가 해야 할 일은 local storage에서 유저정보 유무를 확인하고 유저정보가 없다면 form을 보여주고 우리가
앞에서 해왔던 것처럼 하면 된다.

1. 유저정보 확인 방법
console 창에 localStorage.getItem("username") 입력
이미 localStorage.setItem("username", username); 이렇게 Key를 'username'으로, Value를 사용자가 입력한
이름으로 설정해 둠.
현재 상태에서 위의 것을 진행하면 nico라는 결과가 나옴.

local storage에 들어가서 값을 지운 후에 다시 console창에 localStorage.getItem("username")을 입력하면 
결과로 null이 나옴. local storage에 null이 없기 때문!


2. username 존재를 확인하는 코드를 작성해 본다.
const savedUsername = localStorage.getItem("username");
console.log("savedUseraname");     --> 이것은 확인차 작성한 것이므로 이후에 지워주기!
위의 것을 작성하고 새로고침하면 null이 뜨는 것을 확인할 수 있다.

if (savedUsername === null) {
    //show the form
} else {
    //show the greetings
}     --> 조건문 형식 생성해 주기

* 그리고 위에서 "username"이라는 string(변수 username 말고)이 반복적으로 쓰인 것을 볼 수 있다. 이렇게
반복적으로 쓰인 string도 아래와 같은 식으로 변수로 정의해 주면 오타로 인해 생기는 오류를 방지할 수 있다.
const USERNAME_KEY = "username";


3. 현재는 if 구문과 상관 없이 form이 표시된다.
처음 시작할 때에는 form과 greeting 모두를 안 보이게 시작하는 것이 더 좋을 것 같다.
<form id="login-form" class = "hidden">     --> <form> tag에도 <h1> tag에서와 같이 hidden class를 추가한다.
...........
<h1 id = "greeting" class = "hidden"></h1>

if (savedUsername === null) {     --> 만약 local storage에 저장된 username이 없어서 null이라고 뜬다면
    loginForm.classList.remove(HIDDEN_CLASSNAME);     --> <form> tag에서의 "hidden"이라는 class를 HTML에서 삭제시켜라.
    loginForm.addEventListener("submit", onLoginSubmit);     --> 그리고 앞에서 배웠던 양식 그대로 진행
} else {     --> local storage에 저장된 username이 있다면 
    greeting.innerText = `Hello ${savedUsername}`;     --> 그리고 innerText 'Hello username' 화면에 띄우기
    greeting.classList.remove(HIDDEN_CLASSNAME);     --> <h1> tag에서의 "hidden"이라는 class를 HTML에서 삭제시켜라.
}

이미 이름을 작성하여 제출하였다면 local storage에 저장되어 있는 상태이기 때문에 refresh 하면 화면에
Hello username 형태로 뜨게 된다. (else 실행문이 실행됨.)
localstorage에 있는 정보를 delete하고 다시 새로고침해보면 이름 제출 form이 다시 뜨는 것을 볼 수 있다. 
(if 실행문이 실행됨.) 이름을 다시 적어 제출하면 다시 Hello username 형태로 뜨는 것을 볼 수 있다.


4. 우리는 greeting.innerText = `Hello ${savedUsername}`;과 greeting.classList.remove(HIDDEN_CLASSNAME);
부분이 2번 쓰인 것을 볼 수 있다. (onLoginSubmit 함수와 else문에서)
따라서 이렇게 중복되는 것들은 묶어서 새로운 함수로 만드는 것이 좋다.

function paintGreetings(username) {     --> username을 인자로 받는 paintGreetings 함수 만듦.
    greeting.innerText = `Hello ${username}`;     --> h1 tag에 text Hello ${username} 추가 후
    greeting.classList.remove(HIDDEN_CLASSNAME);     --> hidden class명을 지워준다.
}

function onLoginSubmit(event) {
    event.preventDefault();     // 브라우저의 기본 동작을 막아줌(submit시 페이지가 새로고침되지 않음.)
    loginForm.classList.add(HIDDEN_CLASSNAME);
    const username = loginInput.value;     --> username을 입력한 값을 받는 변수로 정의해 줌.
    localStorage.setItem(USERNAME_KEY, username);
    paintGreetings(username);     --> paintGreetings 함수가 username을 인자로 받게 해 줌.
}

if (savedUsername === null) {     --> 만약 local storage에 유저 정보가 없다면 form의 submit을 기다린다.
    loginForm.classList.remove(HIDDEN_CLASSNAME);
    loginForm.addEventListener("submit", onLoginSubmit);
} else {
    paintGreetins(savedUsername);     --> local storage에 유저 정보가 있다면 그것을 받아 paintGreetings에 
}                                                     인자로 넣어 줄 것이다.

결과로 위에서와 동일하게 작동하면 성공!


* const username = loginInput.value; 를 onLoginSubmit 함수 밖이 아닌 안에서 선언해 준 이유
--> username을 함수 밖에서 선언하게 되면 submit 하기 전에 input에 있는 value가 username에 저장되게 됨.
현재 input의 value가 아무 값이 없을 경우 username에는 빈 값인 ''가 저장되게 되어버림.
local storage에 어떠한 값이 저장되기 위해서는 submit 이벤트가 일어나서 input한 내용이 전달되어야지만 가능!

* function 함수이름(argument)에 들어가는 argument는 이전에 정의한 변수명과는 아무런 상관이 없고 그냥 그 함수
안에서 사용할 변수의 이름을 '임의로' 지어주는 것 뿐이다!
onLoginSubmit에서 (username)을 써준 이유는 loginInput.value에서 받은 값을 사용해주기 위함이고, else문 안에서
(savedUsername)이라고 적어준 이유는 localStage에서 가져온 value 값을 가져오기 위함이다. 우리가 선언한
username은 onLoginSubmit 함수 안에서 선언했기 때문에 두 번째에서도 (username)을 써주면 error가 발생하게 
된다.

* JS에서의 hoisting 개념: JS에서 함수선언과 var은 실행시 코드의 가장 상단부분으로 끌어올려지는 특성이 있다.
                                 따라서 아래에서 paintGreetings 함수를 정의해 놓아도 위의 onLoginSubmit 함수에서 
                                 paintGreetings가 불러와질 수 있다.
--> 참고: https://developer.mozilla.org/ko/docs/Glossary/Hoisting
