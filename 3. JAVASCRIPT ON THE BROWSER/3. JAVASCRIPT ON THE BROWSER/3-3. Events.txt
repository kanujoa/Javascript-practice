1. 우리가 HTML에서 app.js를 import하지 않았다면 document는 존재할 수 없었을 것!

2. 내가 선택한 element의 내부를 보고 싶으므로 console.dir을 사용함.
--> 기본적으로 object로 표시한 element를 보여줌.  
const title = document.querySelector("div.hello:first-child h1");
console.dir(title);    --> 이 결과로 나오는 항목들은 전부 Javascript object임.
어떤 property는 변경 가능하지만 특정 property는 변경 불가함.     ex) namespaceURL 같은 것들

특히, 맨 앞에 on이 붙어있는 element들은 모두 event에 해당함.

3. ex) color를 바꾸기 위해서는 console 창에서 h1을 찾고, 그에 속하는 property인 style을 찾고, 그 안에 속해
 있는 color를 또 찾으면 된다.
즉, 다음과 같이 js 파일에 작성할 수 있다.
title.style.color = "blue"     --> 첫번째 <h1>에 해당하는 내용인 Grab me!가 파란색으로 변한 것을 볼 수 있다.
h1의 style을 Javascript에서 변경한 것이다.

4. event
- 우리가 Javascript에서 대부분 작업할 일은 event를 listen하는 것임.
- event는 내가 클릭을 하는 것을 말함.
  ex) h1 tag 위로 마우스를 올리기, 입력을 끝내기, 이름 적기, enter 누르기 등등

우리가 배울 이벤트는 click event임.
title.addEventListener("click");     --> title을 click하는 event를 listen한다는 의미

click을 했을 때의 응답이 있어야 하기 때문에 function을 하나 만들어 준다.
function handleTitleClick() {     --> click을 했을 때
    console.log("title was clicked!");     --> console 창에 "title was clicked"가 뜸.
}

title.addEventListener("click", handleTitleClick);     --> click event를 listen하고 click event가 발생했을 때 
                                                                        handleTitleClilck( ) 함수가 작동할 수 있게 함.
위와 같은 코드를 작성할 때 어떤 이벤트를 할 건지를 명확히 정해야 하고(click) 유저가 그 element에 해당 event를 했을 때 어떤 함수를
실행할지도 정해야 한다. (handleTitleClick)

but 우리가 원하는 것은 handleTitleClick function을 Javascript에 넘겨주고 유저가 title을 click할 경우에 Javascript가 실행버튼을 
대신 눌러주는 것임. 따라서 handleTitleClick이라고만 괄호 없이 적었다. 괄호를 적어주면 클릭하지 않아도 함수가
실행되어 버린다.
handleTitleClick;

결과는 맨 위에 위치한 Grab me!를 클릭하면 console창에 titlewas clicked!가 뜬다. 계속 클릭하면 클릭한 횟수가
옆에 숫자로 나타나게 된다.





