1.
style 작업에 적합한 도구는 CSS, animation 작업에 적합한 도구는 Javascript!
우리는 Javascript에 색깔 이름을 사용하지 않을 것이고 style 이름도 적지 않을 것이다.

index.html이 css 파일과 javascript 파일을 모두 import하고 있는지 꼭 확인한다. (자바스크립트의 경우
<script src = "file_name"></script>, CSS의 경우 <link rel = "stylesheet" href = "file_name"/> 확인!)
 
style.css 파일로 가서 h1의 색깔의 기본값을 파란색으로 지정해 보자.
h1 {
    color: cornflowerblue;
}     --> Click me!의 색상이 blue로 된다.

active class도 생성해 보자.
.active {
    color: tomato;
}     --> 이 class를 어떤 element에 지정해 주면 (h1이든 span이든) tomato 색깔을 가지게 될 것이다.


2.
우리가 Javascript에서 하고 싶은 것은 h1에 active class를 전달해 주는 것이다. 다음과 같이 할 수 있다.
function handleTitleClick() {
    h1.classname = "active";     --> 여기서 javascript는 HTML을 변경한다. 이것은 getter이자 setter이다.
}                         

h1.addEventListener("click", handleTitleClick);     --> h1(Click me)을 click하는 이벤트가 일어날 시 handleTitleClick()
함수가 실행되어 글자 색상을 원래 기본 색상인 cornflowerblue에서 tomato로 바꾸어지게 된다.

이러한 방식으로 하는 것이 더 적은 javascript 코드로 동일한 결과를 얻었으므로 앞 시간에 작성한 코드보다 더
좋다고 볼 수 있다.


3.
우리가 원하는 것은 h1을 다시 클릭했을 때 원래 상태인 blue 색깔로 돌아가게 만드는 것이다. 즉, click을
함으로써 HTML에 만들어진 class = "active"를 다시 클릭했을 때 없애는 것이다.
여기에서도 조건문을 사용한다.
function handleTitleClick() {
    if (h1.className === "active") {     --> 만약 h1의 class 이름이 active라면(= 글자 색상이 tomato라면)
        h1.className = "";     --> click을 했을 시 className을 비게 해라.(=class를 없애서 기본 색상인 blue로 돌아오게 하라.)
    } else {     --> 만약 h1의 class 이름이 active가 아니라면(=여기 상황에서는 class 이름이 없다면)
        h1.className = "active";     --> h1의 className을 active으로 부여해 주어라.
    }
}    

결과는 앞 시간 결과와 똑같이 작동한다.


4. CSS에 다음과 같은 코드를 추가해 보자.
h1 {
    color: cornflowerblue;
    transition: color .5s ease-in-out;     --> 추가
}              
클릭하여 색깔이 바뀔 때마다 색깔이 부드럽게 전환되는 것을 볼 수 있다.

5. class 이름을 clicked로 바꾼다. JS와 CSS 모두에서 바꾼다! class이름을 정확히 똑같이 적어주어야 한다.
class 이름은 raw value에 속하는데 이는 개발자가 적겠다고 선택할 수 있는 것이다. 따라서 CSS에 있는 calssName을
JS에 옮겨적을 때 실수가 많이 발생하는데 이는 JS에서 변수를 설정하여 error를 축소시킬 수 있다.
function handleTitleClick() {
    const clickedClass = "clicked";      --> 이렇게 변수를 선언해 주면 CSS에서 class이름을 한번만 복붙하면 된다.
    if (h1.className === clickedClass) {     --> clickedClass는 변수이므로 ""(따옴표)를 적지 말아야 한다.
        h1.className = "";
    } else {
        h1.className = clickedClass;
    }
}
                                  
만약 후에 clickedClass라는 변수를 적는 데 실수가 생긴다면 JS(console창)에서 변수가 정의되어 있지 않다는
오류가 발생하였음을 알려주기 때문에 쉽게 오류 파악과 수정이 가능하다.


6. 앞서 완성한 코드에는 버그가 존재한다. HTML에서 임의로 h1에 class = "sexy-font"를 추가해 보자.
<h1 class = "sexy-font">Click me!</h1>

CSS에도 다음과 같은 내용을 추가한다.
.sexy-font {
    font-family: Arial, Helvetica, sans-serif;
}
이렇게 작성하고 refresh하면 시작이 sexy-font가 된다.
이것을 JS로 보게 되면 클릭할 시 class name을 완전히 교체해버리게 된다. 즉, 클릭하는 순간 sexy-font에서
tomato 색깔의 기본 font로 돌아가게 된다.

내가 하고 싶은 것은 처음에 설정한 class sexy-font를 보존하고 싶으므로 clickedClass라는 변수에 sexy-font를
추가해 주면 된다.
const clickedClass = "clicked sexy-font";     --> 클릭하면 색깔이 변하면서(tomato로) 글씨체도 변한다.

하지만 이는 CSS와 JS 모두를 업데이트시켜야 하기 때문에 비효율적이다. class를 추가할 때마다 js랑 CSS에서
업데이트를 계속 해야 하기 때문이다.


7. 따라서 우리가 해줘야 하는 것은 Javascript로 모든 class name을 변경하지는 않을 것이다.
우리가 하고 싶은 것은 sexy-font를 사용하지 않고 clicked class를 변경하는 것임! (다음 시간에)